jenkins:
  agentProtocols:
    - "JNLP4-connect"
    - "Ping"
  authorizationStrategy: "loggedInUsersCanDoAnything"
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  markupFormatter:
    rawHtml:
      disableSyntaxHighlighting: false
  mode: NORMAL
  myViewsTabBar: "standard"
  nodes:
    - permanent:
        launcher:
          ssh:
            credentialsId: "java-agent-ssh-private-key"
            host: "java-agent"
            launchTimeoutSeconds: 210
            maxNumRetries: 10
            port: 22
            retryWaitTime: 15
            jvmOptions: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8001"
            javaPath: "/opt/java/openjdk/bin/java"
            sshHostKeyVerificationStrategy: "nonVerifyingKeyVerificationStrategy"
        name: "java-agent"
        numExecutors: 1
        remoteFS: "/var/data"
        nodeProperties:
          - envVars:
              env:
                - key: "JAVA_HOME"
                  value: "/opt/java/openjdk"
                - key: "MAVEN_HOME"
                  value: "/opt/maven"
  numExecutors: 0
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
  remotingSecurity:
    enabled: true
  scmCheckoutRetryCount: 0
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
  slaveAgentPort: 50000
  systemMessage: "<h1>Warnings Next Generation Plugin Showcase</h1>"
  updateCenter:
    sites:
      - id: "default"
        url: "https://updates.jenkins.io/update-center.json"
  viewsTabBar: "standard"

security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  globalJobDslSecurityConfiguration:
    useScriptSecurity: true
  sSHD:
    port: -1

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              id: "java-agent-ssh-private-key"
              privateKeySource:
                directEntry:
                  privateKey: "-----BEGIN RSA PRIVATE KEY----- \n
              MIIEowIBAAKCAQEA86cZk1vZh/OwzJDEqga0nnKEh1QpCm1uSDjvuLp2pPDPHMp/ \n
              m9Il9O8ZAZ+IVCUXygO3s1BvBF/a7uVYp7XqjDiTj5Jwrs5lEtl4/1iXXKtwbpAc \n
              bsoiEaFDl7Amc4pUfwzsjaqY4yN4jW+JaLOf/+GqCjwpiyJxZ0N2ONlWoph9dvfH \n
              JBK+LUcbKIqbBAADT12d6ePIBsDn9Yaeem0xSJrwEzcMTFYj6asinMlWgO7VwgZx \n
              JPxhMG+jIq6Mh20tFbwc/XGTqSb/vMkJ8i53RnYm5PoT2xqeYlQCLJtvBRBfuBb5 \n
              WJaQcKvTmLoTgkRCbx/QsQzIWzl4MCj56PRsjQIDAQABAoIBAAGTiy7Q4U9n3DT2 \n
              ms8ey/xacVEO0lUm8Be3hpWDX1Eh3bUp+jlf2q8C/P5tscwZkVXVQFMAqjc1B42U \n
              Hka3fpT5qLq9D82RuEWu8oF0aUZINaoBdK2i0SWcDXvlv9nvgyxvQPiJqgOOLzF7 \n
              D0CGKPrW0urOCNbFmkY4wYMMpOrYXnwb6bc1p7snbzeRigaoGvSgvH7fx2Steg1o \n
              j50C4BKVtXPKQdmckG2SFn0T+U1iCsRG+KNcENX2vX8gyrXImAH093WTjKsmM9et \n
              ddWB+molSnXR/MNrf6BB2mpvXLNyR2/RgBd2jwSQnpDkpms4Br5nek3YYN1dBRL4 \n
              6bofHWECgYEA+7n5OIEbvpMtGxJwOovj0KZMzPkHyQH/DZzo48rS+39goNk/0KLF \n
              c3L3sHbT3Lr4qA/6JOCjlzw7o2AbOrRL4ke1uqcCVQMdDqZdvNezMvTzqEbQGdHD \n
              aFnEcUV2tvEwP11q37ianBRPH5stOnEwQNuv6AJo5LKwi4mTS7qEW9cCgYEA98oJ \n
              h+vMKpXGdJzkSDMzYBrC2tYgqjby6+zGKz8BZ58YecsL+oi2GXBaDTfK+16CKeFM \n
              8+qQN9Kl1ZNOlk64XJXjt77h0FcFuGe+6rUpM1aEizrf9sWPVZO+QQfhnjsiAhtQ \n
              YX783ydy9rMn1FDPMtNNq4GMhGsFCaL4RupOjjsCgYAnk9XbTHFQRVOSLhP3IIdx \n
              BrSMhZrzv5yaR1FWf00svZozr/SYmP7yZ+EJnaUxzzPJOLnbknYmERJPXYzqbe6A \n
              ZUXtUtTLCPJIm1+hkUhbeqfUjU2qwZA3l+WK6aEAomszizyCcEPexlKqZXt29NTh \n
              XakKkVZsnqujRL4j6e9lgQKBgQDvhD8EQJyAyXgkvoc3dy6BBj019WdrwWO9Q4km \n
              wmdkN3gcOnYgvUdwfZa+UiEGLAub2eldmW3AWADu2s5LIlq5PDX7Jir3DTc9UiNM \n
              ksL5mfbS8p0M11i+uupbx/eB0N0FtktTgsGCH4rUBsdIRriSA4h/cOFYGm6rKvnc \n
              6p32gwKBgHZYmXzuBWZlWEmPiXbTaI4egJugur5FrT6BJfiLsN2MHBJi9k1IpKEP \n
              SaT+v0IXJ8jP4gSiu4/gyJQpkn7yiMNhwYWlQt+1zyIkHjUsEG82Z8Mqpjx2EJgG \n
              MxDybQux1uk0hyCmMS757WkbTyi0pTWz7PgTIdfmYqhZVV8KRSUi \n
              -----END RSA PRIVATE KEY----- \n"
              scope: GLOBAL
              username: "agent"
          - gitHubApp:
              appID: "74721"
              description: "GitHub App"
              id: "github-app"
              privateKey: ${GITHUB_APP}
              scope: GLOBAL
unclassified:
  globalDefaultFlowDurabilityLevel:
    durabilityHint: PERFORMANCE_OPTIMIZED
  location:
    adminAddress: "Adresse nicht konfiguriert <nobody@nowhere>"
    url: "http://localhost:8080/"
  mailer:
    charset: "UTF-8"
    useSsl: false
  pollSCM:
    pollingThreadCount: 10

tool:
  git:
    installations:
      - home: "git"
        name: "Default"
  maven:
    installations:
      - name: "mvn-default"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.6"
  jdk:
    defaultProperties:
      - installSource:
          installers:
            - jdkInstaller:
                acceptLicense: false
  pipelineMaven:
    publisherOptions:
      - jacocoPublisher:
          disabled: true
      - junitPublisher:
          disabled: true
          healthScaleFactor: 1.0
    triggerDownstreamUponResultAborted: false
    triggerDownstreamUponResultFailure: false
    triggerDownstreamUponResultNotBuilt: false
    triggerDownstreamUponResultSuccess: true
    triggerDownstreamUponResultUnstable: false

jobs:
  - script: >
      pipelineJob('pipeline-codingstyle') {
          definition {
              cpsScm {
                  scriptPath 'Jenkinsfile'
                  scm {
                    git {
                        remote { url 'https://github.com/uhafner/codingstyle.git' }
                        branch '*/main'
                        extensions {}
                    }
                  }
              }
          }
      };
      pipelineJob('pipeline-analysis-model') {
          definition {
              cpsScm {
                  scriptPath 'etc/Jenkinsfile.analysis'
                  scm {
                    git {
                        remote { url 'https://github.com/jenkinsci/analysis-model.git' }
                        branch '*/master'
                        extensions {}
                    }
                  }
              }
          }
      };
      freeStyleJob('freestyle-coverage-model') {
          scm {
              git {
                  remote { url 'https://github.com/jenkinsci/coverage-model.git' }
                  branch '*/main'
                  extensions {}
              }
          }
          steps {
              maven {
                  mavenInstallation('mvn-default')
                  goals('clean verify')
                  properties(skipITs: true)
              }
          }
          publishers {
              recordIssues {
                  sourceCodeEncoding('UTF-8')
                  aggregatingResults(true)
                  tools {
                      mavenConsole {}
                      java {}
                      javaDoc {}
                      taskScanner {
                          highTags('FIXME')
                          normalTags('TODO')
                          includePattern('**/*.java')
                          excludePattern('target/**/*')
                      }
                      spotBugs {
                          pattern('**/target/spotbugsXml.xml')
                          useRankAsPriority(true)
                      }
                      checkStyle {
                          pattern('**/target/checkstyle-result.xml')
                      }
                      pmd {
                          pattern('**/target/pmd.xml')
                      }
                      cpd {
                          pattern('**/target/cpd.xml')
                      }
                  }
              }
              recordCoverage {
                  tools {
                      coverageTool {
                          parser('JACOCO')
                      }
                  }
                  qualityGates {
                      coverageQualityGate {
                          threshold(70)
                          metric('LINE')
                          baseline('PROJECT')
                          criticality('UNSTABLE')
                      }
                  } 
                  enabledForFailure(true)
                  skipPublishingChecks(true)
                  sourceCodeEncoding('UTF-8')
                  sourceCodeRetention('EVERY_BUILD')
              }   
          }
      };
      pipelineJob('releases-analysis-model') {
          definition {
              cps {
                  script '''
                      node {
                          def url = "https://github.com/jenkinsci/analysis-model.git"
                          def tags = "git ls-remote -t --sort v:refname --refs $url | cut -f1 | tail -n +50"
                          env.COUNT = sh(script: tags + " | wc -l", returnStdout: true).trim()
                          if (env.COUNT.toInteger() > env.BUILD_NUMBER.toInteger()) {

                              stage('Checkout') {
                                  echo "Build: ${BUILD_NUMBER}"
                                  env.HASH = sh(script: tags + " | head -n ${BUILD_NUMBER} | tail -1", returnStdout: true).trim()
                                  echo "Hash: ${HASH}"
                                  checkout([$class           : 'GitSCM',
                                            branches         : [[name: "${HASH}"]],
                                            userRemoteConfigs: [[url: "$url"]]])
                              }

                              stage ('Git mining') {
                                      discoverGitReferenceBuild()
                                      mineRepository()
                                      gitDiffStat()
                              }

                              stage ('Build, Test, and Static Analysis') {
                                  withMaven(maven: 'mvn-default', mavenLocalRepo: '/var/data/m2repository', mavenOpts: '-Xmx768m -Xms512m') {
                                      sh "mvn -V -U --fail-never -e clean verify -Denforcer.skip -Dmaven.test.failure.ignore"
                                  }

                                  recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'
                                  recordIssues tool: errorProne()

                                  junit(allowEmptyResults: true, testResults: '**/target/*-reports/TEST-*.xml')

                                  publishCoverage(adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], sourceFileResolver: sourceFiles('STORE_ALL_BUILD'))
                                  recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),
                                      spotBugs(pattern: 'target/spotbugsXml.xml'),
                                      pmdParser(pattern: 'target/pmd.xml'),
                                      cpd(pattern: 'target/cpd.xml'),
                                      revApi(pattern: 'target/revapi-result.json'),
                                      taskScanner(highTags:'FIXME', normalTags:'TODO', includePattern: '**/*.java', excludePattern: 'target/**/*')],
                                      qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
                              }

                              build(job: env.JOB_NAME, wait: false)

                          } 
                          else {
                              echo "Stopping after ${COUNT} tags"
                          }
                      }
                  '''
              }
          }
      };
      pipelineJob('releases-forensics') {
          definition {
              cps {
                  script '''
                    node ('java-11-agent') {
                      def url = "https://github.com/jenkinsci/forensics-api-plugin.git"
                      def tags = "git ls-remote -t --sort v:refname --refs $url | cut -f1 | tail -n +30"
                      env.COUNT = sh(script: tags + " | wc -l", returnStdout: true).trim()
      
                      stage('Checkout') {
                          echo "Build: ${BUILD_NUMBER}"
                          env.HASH = sh(script: tags + " | head -n ${BUILD_NUMBER} | tail -1", returnStdout: true).trim()
                          echo "Hash: ${HASH}"
                          checkout([$class           : 'GitSCM',
                                    branches         : [[name: "${HASH}"]],
                                    userRemoteConfigs: [[url: "$url"]]])
                      }

                      stage ('Git mining') {
                              discoverGitReferenceBuild()
                              mineRepository()
                              gitDiffStat()
                      }

                      stage ('Build, Test, and Static Analysis') {
                          withMaven(maven: 'mvn-default', mavenLocalRepo: '/var/data/m2repository', mavenOpts: '-Xmx768m -Xms512m') {
                              sh "mvn -V -U --fail-never -e clean verify -Denforcer.skip -Dmaven.test.failure.ignore"
                          }

                          recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'
                          recordIssues tool: errorProne()

                          junit(allowEmptyResults: true, testResults: '**/target/*-reports/TEST-*.xml')

                          recordCoverage(tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco/jacoco.xml']], 
                              sourceCodeRetention: 'EVERY_BUILD',
                              qualityGates: [
                                  [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true], 
                                  [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]])
                          recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),
                              spotBugs(pattern: 'target/spotbugsXml.xml'),
                              pmdParser(pattern: 'target/pmd.xml'),
                              cpd(pattern: 'target/cpd.xml'),
                              revApi(pattern: 'target/revapi-result.json'),
                              taskScanner(highTags:'FIXME', normalTags:'TODO', includePattern: '**/*.java', excludePattern: 'target/**/*')],
                              qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
                      }
      
                      if (env.COUNT.toInteger() > env.BUILD_NUMBER.toInteger()) {
                         build(job: env.JOB_NAME, wait: false)
                      }
                      else {
                         echo "Stopping after ${COUNT} tags"
                      }
                  '''
              }
          }
      };
      pipelineJob('releases-coverage-model') {
          definition {
              cps {
                  script '''
                    node ('java-11-agent') {
                        def url = "https://github.com/jenkinsci/coverage-model.git"
                        def tags = "git ls-remote -t --sort v:refname --refs $url | cut -f1"
                        env.COUNT = sh(script: tags + " | wc -l", returnStdout: true).trim()

                        stage('Checkout') {
                            echo "Build: ${BUILD_NUMBER}"
                            env.HASH = sh(script: tags + " | head -n ${BUILD_NUMBER} | tail -1", returnStdout: true).trim()
                            echo "Hash: ${HASH}"
                            checkout([$class           : 'GitSCM',
                                      branches         : [[name: "${HASH}"]],
                                      userRemoteConfigs: [[url: "$url"]]])
                        }

                        stage ('Git mining') {
                                discoverGitReferenceBuild()
                                mineRepository()
                                gitDiffStat()
                        }

                        stage ('Build, Test, and Static Analysis') {
                            withMaven(maven: 'mvn-default', mavenLocalRepo: '/var/data/m2repository', mavenOpts: '-Xmx768m -Xms512m') {
                                sh "mvn -V -U --fail-never -e clean verify -Denforcer.skip -Dmaven.test.failure.ignore"
                            }

                            recordIssues tools: [java(), javaDoc()], aggregatingResults: 'true', id: 'java', name: 'Java'
                            recordIssues tool: errorProne()

                            junit(allowEmptyResults: true, testResults: '**/target/*-reports/TEST-*.xml')

                            recordCoverage(tools: [[parser: 'JACOCO', pattern: 'target/site/jacoco/jacoco.xml']], 
                                sourceCodeRetention: 'EVERY_BUILD',
                                qualityGates: [
                                    [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true], 
                                    [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]])
                            recordIssues tools: [checkStyle(pattern: 'target/checkstyle-result.xml'),
                                spotBugs(pattern: 'target/spotbugsXml.xml'),
                                pmdParser(pattern: 'target/pmd.xml'),
                                cpd(pattern: 'target/cpd.xml'),
                                revApi(pattern: 'target/revapi-result.json'),
                                taskScanner(highTags:'FIXME', normalTags:'TODO', includePattern: '**/*.java', excludePattern: 'target/**/*')],
                                qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
                        }

                        stage ('Mutation Coverage') {
                            withMaven(mavenLocalRepo: '/var/data/m2repository', mavenOpts: '-Xmx768m -Xms512m') {
                                sh "mvn org.pitest:pitest-maven:mutationCoverage"
                            }
                            recordCoverage(tools: [[parser: 'PIT', pattern: 'target/pit-reports/mutations.xml']],
                                id: 'pit', name: 'Mutation Coverage',
                                sourceCodeRetention: 'EVERY_BUILD',
                                qualityGates: [
                                    [threshold: 60.0, metric: 'MUTATION', baseline: 'PROJECT', unstable: true]])
                        }

                        if (env.COUNT.toInteger() > env.BUILD_NUMBER.toInteger()) {
                            build(job: env.JOB_NAME, wait: false)
                        } 
                        else {
                            echo "Stopping after ${COUNT} tags"
                        }
                }
                  '''
              }
          }
      };
